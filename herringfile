# coding=utf-8
"""
This is Herring's herringfile which contains various tasks used in development.

As you can see, a task is just a function with a @task decorator.  The decorator
takes an optional :depends: keyword argument which should point to a list of
string task names which are task dependencies.  Run "herring --longhelp" for
more details.

Add the following to your *requirements.txt* file:

* argparse if sys.version_info < (3, 2)

"""

import os
from pprint import pformat
from sys import version, path

from herring.herring_app import task, HerringFile, task_execute, verbose_mode, debug_mode
# noinspection PyUnresolvedReferences
from herringlib.simple_logger import info, Logger, debug

# noinspection PyUnresolvedReferences
from herringlib.project_settings import Project

herringfile_dir = os.path.dirname(__file__)
Project.herringfile_dir = herringfile_dir

Logger.set_verbose(verbose_mode)
Logger.set_debug(debug_mode)

Project.metadata(
    {
        'name': 'Herring',
        'package': 'herring',
        'author': 'Roy Wright',
        'author_email': 'roy@wright.org',
        'description': 'A task based build utility similar to rake.',

        # python version to build source distribution with
        'sdist_python_version': '34',

        # python versions to build wheels for
        'wheel_python_versions': ('34', '33', '27', '26'),
    }
)

Project.required_files()

if HerringFile.uninstalled_packages:
    print("You have missing packages.  You may install using the following command:")
    print("\n  pip install %s" % ' '.join(HerringFile.uninstalled_packages))

info("Python version: {version}".format(version=version))
debug("Python path: {path}".format(path=pformat(path)))


@task(depends=['build', 'doc', 'test'])
def default():
    """ The default task(s) to run when none are specified """
    pass


@task()
def show():
    """ show all files in the project """
    for root_dir, dirs, files in os.walk('.'):
        # ignore hidden files and directories (starts with '.')
        files = [f for f in files if not f[0] == '.']
        dirs[:] = [d for d in dirs if not d[0] == '.']

        # ignore compiled python files
        files = [f for f in files if not f.endswith('.pyc')]
        dirs[:] = [d for d in dirs if not d == '__pycache__']

        info("%s (%d files)" % (root_dir, len(files)))
        for name in files:
            info("    %s" % name)


@task(namespace='demo', help='You may show arguments using:  -a value  or:  --arg value')
def args_demo():
    """ echos that task's arguments """
    info("argv: %s" % repr(task.argv))
    info("kwargs: %s" % repr(task.kwargs))


@task(namespace='demo')
def the():
    """test dependency"""
    print('The')


@task(namespace='demo', depends=['demo::the'])
def bang():
    """test error handling"""
    print('bang!')


@task(namespace='demo')
def big():
    """test running namespace tasks"""
    print('big')
    task_execute('demo::bang')


@task(namespace='demo', depends=['demo::the'])
def bigger():
    """test running namespace tasks"""
    print('bigger')
    task_execute(['demo::bang'])


@task(namespace='demo')
def boom():
    """test calling method"""
    bigger()
    print('Boom!')

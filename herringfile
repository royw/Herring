# coding=utf-8
"""
This is Herring's herringfile which contains various tasks used in development.

As you can see, a task is just a function with a @task decorator.  The decorator
takes an optional :depends: keyword argument which should point to a list of
string task names which are task dependencies.

Add the following to your *requirements.txt* file:

* herring
* argparse

"""

import os
from herring.herring_app import task, HerringFile
from herring.support.simple_logger import info

from herringlib.project_settings import ProjectSettings
from herringlib.version import getProjectVersion


Project = ProjectSettings()

version = getProjectVersion(project_package='herring')
info("version: %s" % version)
Project.metadata(
    {
        'name': 'Herring',
        'package': 'herring',
        'author': 'Roy Wright',
        'author_email': 'roy.wright@hp.com',
        'description': '',
        'script': 'herring',
        'main': 'herring_main.py',
        'version': version,
        'distHost': 'tpcvm143.austin.hp.com',
        'pypiDir': '/var/pypi/dev',
        'user': os.environ['USER'],
        'pylintrc': os.path.join(HerringFile.directory, 'pylint.rc'),
        'pythonPath': ".:%s" % HerringFile.directory
    })

Project.dirMap(
    {
        'quality': 'quality',
        'docs': 'docs',
        'uml': 'docs/_src/uml',
        'api': 'docs/api',
        'templates': 'docs/_templates',
        'report': 'report',
        'tests': 'tests',
        'dist': 'dist',
        'build': 'build',
        'egg': "%s.egg-info" % Project.name
    }
)

if HerringFile.uninstalled_packages:
    print("You have missing packages.  You may install using the following command:")
    print("\n  pip install %s" % ' '.join(HerringFile.uninstalled_packages))


@task()
def initProject():
    """Initializes a project by creating setup.py and required files"""
    Project.requiredFiles()


@task(depends=['build', 'doc', 'test'])
def default():
    """ The default task(s) to run when none are specified """
    pass


@task()
def show():
    """ show all files in the project """
    # noinspection PyUnusedLocal,PyDocstring
    def walker(arg, dir_name, files):
        if '/.' not in dir_name:
            info("%s (%d files)" % (dir_name, len(files)))
            for file_name in files:
                info("    %s" % file_name)

    os.path.walk('.', walker, None)


@task(help='You may show arguments using:  -a value  or:  --arg value')
def argsDemo():
    """ echos that task's arguments """
    info("argv: %s" % repr(task.argv))
    info("kwargs: %s" % repr(task.kwargs))

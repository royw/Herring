# coding=utf-8
"""
This is Herring's herringfile which contains various tasks used in development.

As you can see, a task is just a function with a @task decorator.  The decorator
takes an optional :depends: keyword argument which should point to a list of
string task names which are task dependencies.

Add the following to your *requirements.txt* file:

* herring
* argparse

"""

import os
from herring.herring_app import task, HerringFile
from herring.support.simple_logger import info, warning

from herringlib.project_settings import Project

herringfile_dir = os.path.dirname(__file__)
Project.herringfile_dir = herringfile_dir


def env(name, default_value=None):
    """
    Safely get value from environment variable, get default value if not defined in environment
    :param name: The environment variable name
    :param default_value:  the value to return if the variable is not in the environment
    """
    if name in os.environ:
        return os.environ[name]
    warning("The \"{name}\" environment variable is not set".format(name=name))
    return default_value


Project.metadata(
    {
        'name': 'Herring',
        'package': 'herring',
        'author': 'Roy Wright',
        'author_email': 'roy@wright.org',
        'description': '',
        'script': 'herring',
        'main': 'herring_main.py',
        'version': None,
        'dist_host': env('LOCAL_PYPI_HOST'),
        'pypi_path': env('LOCAL_PYPI_PATH'),
        'user': env('USER'),
        'password': None,
        'port': 22,
        'pylintrc': os.path.join(HerringFile.directory, 'pylint.rc'),
        'pythonPath': ".:%s" % HerringFile.directory,

        'quality_dir': 'quality',
        'docs_dir': 'docs',
        'uml_dir': 'docs/_src/uml',
        'api_dir': 'docs/api',
        'templates_dir': 'docs/_templates',
        'docs_html_dir': 'build/docs',
        'report_dir': 'report',
        'tests_dir': 'tests',
        'dist_dir': 'dist',
        'build_dir': 'build',
        'features_dir': 'features',
        'egg_dir': "Herring.egg-info",
    }
)

Project.required_files()


from herringlib.version import get_project_version
version = get_project_version(project_package='herring')
info("version: %s" % version)
Project.version = version

if HerringFile.uninstalled_packages:
    print("You have missing packages.  You may install using the following command:")
    print("\n  pip install %s" % ' '.join(HerringFile.uninstalled_packages))


@task()
def init_project():
    """Initializes a project by creating setup.py and required files"""
    Project.requiredFiles()


@task(depends=['build', 'doc', 'test'])
def default():
    """ The default task(s) to run when none are specified """
    pass


@task()
def show():
    """ show all files in the project """
    # noinspection PyUnusedLocal,PyDocstring
    def walker(arg, dir_name, files):
        if '/.' not in dir_name:
            info("%s (%d files)" % (dir_name, len(files)))
            for file_name in files:
                info("    %s" % file_name)

    os.path.walk('.', walker, None)


@task(help='You may show arguments using:  -a value  or:  --arg value')
def args_demo():
    """ echos that task's arguments """
    info("argv: %s" % repr(task.argv))
    info("kwargs: %s" % repr(task.kwargs))


@task()
def bang():
    """test error handling"""
    raise RuntimeError('boom!')

